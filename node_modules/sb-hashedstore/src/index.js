const { hexrandom, format } = require('@jp6rt/utils')

/**
 * HashedStore - hashed value stored on a map to avoid re-hashing value on runtime
 */

const HashedStore = class {
	constructor() {
		/**
		 * @property
		 * all hashed values are stored on this Map
		 */
		this.hashed = new Map
		this.hashedReversed = new Map
		/**
		 * @property
		 */
		this.storeLength = 0
	}
	hash(value){
		let hashed = this.retrieve(value) || ''
		if (hashed)
			return hashed
		if (this.storeLength >= 1048576)
			return 'error'
		while (hashed.length < 5)
			hashed = format('{0}{1}', hashed, hexrandom())		
		this.store(value, hashed)
		return hashed
	}
	/**
	 * store the hash value
	 * @method
	 * @param { string } value 
	 * @param { string } hashed 
	 */
	store(value, hashed) {
		this.storeLength++
		this.hashed.set(value, hashed)
		this.hashedReversed.set(hashed, value)
	}
	/**
	 * retrives the hash for a value
	 * @function
	 * @param { string } value 
	 * @returns { string }
	 */
	retrieve(value) {
		return this.hashed.get(value)
	}
	/**
	 * retrieves the path for a specific hash
	 * @function
	 * @param { string } hashed 
	 * @returns { string }
	 */
	getPath(hashed) {
		return this.hashedReversed.get(hashed)
	}
}

module.exports = HashedStore