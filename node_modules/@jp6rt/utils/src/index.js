const hexChars = '0\'1\'2\'3\'4\'5\'6\'7\'8\'9\'a\'b\'c\'d\'e\'f'.split('\'')
exports.hexChars = hexChars

/**
 * Formats a string e.g., format(foo+{0}, bar) => foo+bar
 * @function
 * @argument { any[] } any
 * @returns string
 */
exports.format = function(){
	let msg, params
	(typeof arguments[0] === 'object') ? (msg = arguments[0][0], params = arguments[0]) : (msg = arguments[0], params = arguments)
	msg = msg.replace(/{\d}/g, (s) => {
		const key = (1 * s.match(/\d/)[0]) + 1
		const res = typeof params[key] !== 'undefined' ? params[key] : s
		return typeof res === 'object' ? JSON.stringify(res) : res
	})
	return msg
}

/**
 * Returns a number on range(min=1, max=10)
 * @function
 * @param { number} min 
 * @param { numer } max 
 * @returns number
 */
const random = (min, max) => {
	const valid = (val) => {
		return typeof val === 'number' && val > -1
	} 
	const rand = (Math.random() + '').substr(2) * 1
	min = valid(min) ? min : 1
	max = valid(max) ? max : 10
	return (rand % (max)) + (min === 0 ? random(1, 2) - 1 : min)
}

exports.random = random

/**
 * returns a random hex value from 0-f
 * @function
 * @returns char
 */
exports.hexrandom = () => {
	return hexChars[ random(0, 15) ]
}

/**
 * Traditional in_array function
 * @param { string } needle 
 * @param { array } haystack 
 */
exports.inArray = (needle, haystack) => !!haystack.find((hay) => hay === needle)