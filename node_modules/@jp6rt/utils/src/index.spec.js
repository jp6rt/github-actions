describe('Commons', () => {
	const { random, hexrandom, hexChars, format, inArray } = require('./')	
	describe('(format)', () => {
		const result = 'foobar'
		it('should equal foobar', () => {
			expect(format('{0}{1}', 'foo', 'bar')).toEqual(result)
			expect(format(['{0}{1}', 'foo', 'bar'])).toEqual(result) //arguments as array
		})
	})
	describe('(random)', () => {
		it('should be a whole number', () => {
			expect(random() % 1).toEqual(0)
		})
		it('should be within 1-10', () => {
			// a series of random numbers to be tested
			expect(random()).toBeGreaterThan(0)
			expect(random()).toBeLessThan(11)
			expect(random()).toBeGreaterThan(0)
			expect(random()).toBeLessThan(11)
			expect(random()).toBeGreaterThan(0)
			expect(random()).toBeLessThan(11)
		})

		it('should be within 1-2', () => {
			// a series of random numbers to be tested
			expect(random(1,2)).toBeGreaterThan(0)
			expect(random(1,2)).toBeLessThan(3)
			expect(random(1,2)).toBeGreaterThan(0)
			expect(random(1,2)).toBeLessThan(3)
			expect(random(1,2)).toBeGreaterThan(0)
			expect(random(1,2)).toBeLessThan(3)
		})

		it('should be within 9999-999999', () => {
			// a series of random numbers to be tested
			expect(random(9999,999999)).toBeGreaterThan(9998)
			expect(random(9999,999999)).toBeLessThan(1e6)
			expect(random(9999,999999)).toBeGreaterThan(9998)
			expect(random(9999,999999)).toBeLessThan(1e6)
			expect(random(9999,999999)).toBeGreaterThan(9998)
			expect(random(9999,999999)).toBeLessThan(1e6)
		})
	})
	describe('(hexrandom)', () => {
		it('should return a hex character', () => {
			expect(hexChars).toEqual(jasmine.arrayContaining([hexrandom()]))
			expect(hexChars).toEqual(jasmine.arrayContaining([hexrandom()]))
			expect(hexChars).toEqual(jasmine.arrayContaining([hexrandom()]))
		})
	})
	describe('(inArray)', () => {
		it('should return true', () => {
			expect(inArray('foo', ['foo', 'bar'])).toBeTruthy()
		})
		it('should return false', () => {
			expect(inArray('off', ['foo', 'bar'])).toBeFalsy()
		})
	})
})